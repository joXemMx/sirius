name: Build and Publish
on:
  push:
    branches:
      - stable
      - master
#      - stable-service-api
    paths-ignore:
      - '**/README.md'
      - 'sirius_doc/**/*'

jobs:
  distCLI:
    strategy:
      matrix:
        os: [windows-latest]
    runs-on: ${{ matrix.os }}
    env:
      GENERIC_INSTALLER_CERTIFICATE: ${{ secrets.GENERIC_INSTALLER_CERTIFICATE }}
      MACOS_APP_IDENTITY_ID: ${{ secrets.MACOS_APP_IDENTITY_ID }}
      MACOS_IDENTITY_ID: ${{ secrets.MACOS_IDENTITY_ID }}
      MACOS_APPLE_ID: ${{ secrets.MACOS_APPLE_ID }}
      MACOS_APPLE_ID_PW: ${{ secrets.MACOS_APPLE_ID_PW }}
      SIRIUS_USER: ${{ secrets.SIRIUS_USER }}
      SIRIUS_PW: ${{ secrets.SIRIUS_PW }}
      #          LINUX_INSTALLER_CERTIFICATE_FILE: ${{ steps.generic_codesign_cert.outputs.filePath }}
    steps:
      - uses: actions/checkout@v2
      - name: Set up Zulu JDK
        uses: actions/setup-java@v1
        with:
          java-version: '15' # The JDK version to make available on the path.
          java-package: jdk # (jre, jdk, or jdk+fx) - defaults to jdk
          architecture: x64 # (x64 or x86) - defaults to x64
      - name: Load Build properties
        uses: Reedyuk/read-properties@v1.0.1
        id: sirius_version
        with:
          path: './sirius_cli/src/main/resources/sirius_frontend.build.properties'
          property: 'de.unijena.bioinf.siriusFrontend.version'

      - if: ${{ (matrix.os == 'macos-latest') && (env.MACOS_APP_IDENTITY_ID != '') }}
        name: Import Apple APP Code-signing ID and p12
        uses: apple-actions/import-codesign-certs@v1
        with:
          keychain-password: ${{ secrets.MACOS_TMP_KEYCHAIN_PWD }}
          p12-file-base64: ${{ secrets.MACOS_APP_CERTIFICATE }}
          p12-password: ${{ secrets.MACOS_APP_CERTIFICATE_PWD }}

      - if: ${{ (matrix.os == 'macos-latest') && (env.MACOS_IDENTITY_ID != '') }}
        name: Import Apple Installer Code-signing ID and p12
        uses: apple-actions/import-codesign-certs@v1
        with:
          create-keychain: false
          keychain-password: ${{ secrets.MACOS_TMP_KEYCHAIN_PWD }}
          p12-file-base64: ${{ secrets.MACOS_CERTIFICATE }}
          p12-password: ${{ secrets.MACOS_CERTIFICATE_PWD }}

      - if: matrix.os == 'macos-latest'
        name: Check Identities
        run: /usr/bin/security find-identity

      - if: ${{ (matrix.os == 'windows-latest' ||  matrix.os == 'ubuntu-latest') && (env.GENERIC_INSTALLER_CERTIFICATE != '') }}
        name: Load generic installer codesign cert
        id: generic_codesign_cert
        uses: timheuer/base64-to-file@v1.1
        with:
          fileName: 'generic_installer_cert.p12'
          encodedString: ${{ env.GENERIC_INSTALLER_CERTIFICATE }}

      - name: Gradle Build
        uses: eskatos/gradle-command-action@v1
        env:
          WIN_INSTALLER_CERTIFICATE_FILE: ${{ steps.generic_codesign_cert.outputs.filePath }}
        with:
          gradle-version: 6.9
          build-root-directory: sirius_dist/sirius_cli_single_os
          arguments: distImage

      - if: matrix.os == 'windows-latest'
        name: Sirius Windows Run
        run: |
          ./sirius_dist/sirius_cli_single_os/build/distributions/sirius/sirius.exe login --user-env SIRIUS_USER --password-env SIRIUS_PW
          mkdir sirius_cli/src/test/temp_results
          mkdir sirius_cli/src/test/temp_results/mgf_temp_output
          mkdir sirius_cli/src/test/temp_results/mgf_temp_summary
          mkdir sirius_cli/src/test/temp_results/ms_temp_output
          mkdir sirius_cli/src/test/temp_results/ms_temp_summary
          mkdir sirius_cli/src/test/temp_results/txt_temp_output
          mkdir sirius_cli/src/test/temp_results/txt_temp_summary
          set PATH=%cd%
          echo $PATH
          set MGF_DATA=%PATH%/sirius_doc/manual/demo-data/mgf/laudanosine.mgf
          set MS_DATA=%PATH%/sirius_doc/manual/demo-data/ms/Bicuculline.ms
          set TXT_DATA_1=%PATH%/sirius_doc/manual/demo-data/txt/chelidonine_ms.txt
          set TXT_DATA_2=%PATH%/sirius_doc/manual/demo-data/txt/chelidonine_msms1.txt
          set TXT_DATA_3=%PATH%/sirius_doc/manual/demo-data/txt/chelidonine_msms2.txt
          ./sirius_dist/sirius_cli_single_os/build/distributions/sirius/sirius.exe --input %MGF_DATA% --output ./sirius_cli/src/test/temp_results/mgf_temp_output formula -p orbitrap fingerprint structure compound-classes write-summaries --output ./sirius_cli/src/test/temp_results/mgf_temp_summary
          ./sirius_dist/sirius_cli_single_os/build/distributions/sirius/sirius.exe -1 sirius_doc/manual/demo-data/txt/chelidonine_ms.txt -2 sirius_doc/manual/demo-data/txt/chelidonine_msms1.txt,sirius_doc/manual/demo-data/txt/chelidonine_msms2.txt -z 354.134704589844 -o sirius_cli/src/test/temp_results/txt_temp_output formula -p orbitrap write-summaries --output sirius_cli/src/test/temp_results/txt_temp_summary
          ./sirius_dist/sirius_cli_single_os/build/distributions/sirius/sirius.exe -o sirius_cli/src/test/temp_results/ms_temp_output -i sirius_doc/manual/demo-data/ms/Bicuculline.ms --ignore-formula formula -p orbitrap -c 5 fingerprint structure compound-classes write-summaries --output sirius_cli/src/test/temp_results/ms_temp_summary

      #- if: matrix.os == 'ubuntu-latest'
      #  name: Sirius Ubuntu Run
      #  run: |
      #    ./sirius_dist/sirius_cli_single_os/build/distributions/sirius/bin/sirius login -u ${{ env.SIRIUS_USER }} -p ${{ env.SIRIUS_PW }}
      #    mkdir sirius_cli/src/test/temp_results
      #    mkdir sirius_cli/src/test/temp_results/mgf_temp_output
      #    mkdir sirius_cli/src/test/temp_results/mgf_temp_summary
      #    mkdir sirius_cli/src/test/temp_results/ms_temp_output
      #    mkdir sirius_cli/src/test/temp_results/ms_temp_summary
      #    mkdir sirius_cli/src/test/temp_results/txt_temp_output
      #    mkdir sirius_cli/src/test/temp_results/txt_temp_summary
      #   ./sirius_dist/sirius_cli_single_os/build/distributions/sirius/bin/sirius --input sirius_doc/manual/demo-data/mgf/laudanosine.mgf --output sirius_cli/src/test/temp_results/mgf_temp_output formula -p orbitrap fingerprint structure compound-classes write-summaries --output sirius_cli/src/test/temp_results/mgf_temp_summary
      #   ./sirius_dist/sirius_cli_single_os/build/distributions/sirius/bin/sirius -1 sirius_doc/manual/demo-data/txt/chelidonine_ms.txt -2 sirius_doc/manual/demo-data/txt/chelidonine_msms1.txt,sirius_doc/manual/demo-data/txt/chelidonine_msms2.txt -z 354.134704589844 -o sirius_cli/src/test/temp_results/txt_temp_output formula -p orbitrap write-summaries --output sirius_cli/src/test/temp_results/txt_temp_summary
      #   ./sirius_dist/sirius_cli_single_os/build/distributions/sirius/bin/sirius -o sirius_cli/src/test/temp_results/ms_temp_output -i sirius_doc/manual/demo-data/ms/Bicuculline.ms --ignore-formula formula -p orbitrap -c 5 fingerprint structure compound-classes write-summaries --output sirius_cli/src/test/temp_results/ms_temp_summary

      #- if: matrix.os == 'macos-latest'
      #  name: Sirius MacOS Run
      #  run: |
      #    ./sirius_dist/sirius_cli_single_os/build/distributions/sirius.app/Contents/MacOS/sirius login -u ${{ env.SIRIUS_USER }} -p ${{ env.SIRIUS_PW }}
      #    mkdir sirius_cli/src/test/temp_results
      #    mkdir sirius_cli/src/test/temp_results/mgf_temp_output
      #    mkdir sirius_cli/src/test/temp_results/mgf_temp_summary
      #    mkdir sirius_cli/src/test/temp_results/ms_temp_output
      #    mkdir sirius_cli/src/test/temp_results/ms_temp_summary
      #    mkdir sirius_cli/src/test/temp_results/txt_temp_output
      #    mkdir sirius_cli/src/test/temp_results/txt_temp_summary
      #    ./sirius_dist/sirius_cli_single_os/build/distributions/sirius.app/Contents/MacOS/sirius --input sirius_doc/manual/demo-data/mgf/laudanosine.mgf --output sirius_cli/src/test/temp_results/mgf_temp_output formula -p orbitrap fingerprint structure compound-classes write-summaries --output sirius_cli/src/test/temp_results/mgf_temp_summary
      #    ./sirius_dist/sirius_cli_single_os/build/distributions/sirius.app/Contents/MacOS/sirius -1 sirius_doc/manual/demo-data/txt/chelidonine_ms.txt -2 sirius_doc/manual/demo-data/txt/chelidonine_msms1.txt,sirius_doc/manual/demo-data/txt/chelidonine_msms2.txt -z 354.134704589844 -o sirius_cli/src/test/temp_results/txt_temp_output formula -p orbitrap write-summaries --output sirius_cli/src/test/temp_results/txt_temp_summary
      #    ./sirius_dist/sirius_cli_single_os/build/distributions/sirius.app/Contents/MacOS/sirius -o sirius_cli/src/test/temp_results/ms_temp_output -i sirius_doc/manual/demo-data/ms/Bicuculline.ms --ignore-formula formula -p orbitrap -c 5 fingerprint structure compound-classes write-summaries --output sirius_cli/src/test/temp_results/ms_temp_summary

      - name: Sirius MGF Test
        run: |
          RESULTS="sirius_cli/src/test/temp_results/"
          OUTPUT="${RESULTS}mgf_temp_output/1_laudanosine_FEATURE_1/"
          SUMMARY="${RESULTS}mgf_temp_summary/1_laudanosine_FEATURE_1/"
          CANOPUS="${OUTPUT}canopus/"
          CANOPUS_NPC="${OUTPUT}canopus_npc/"
          FINGERPRINTS="${OUTPUT}fingerprints/"
          FINGER_ID="${OUTPUT}fingerprints/"
          DIRS=(${SUMMARY} ${OUTPUT} ${CANOPUS} ${CANOPUS_NPC} ${FINGERPRINTS} ${FINGER_ID})
          for DIR in "${DIRS[@]}" ; do
            if [ -d "${DIR}" ]; then
              echo "Found result directory ${DIR}..."
              if [ "$(ls -A ${DIR})" ]; then
                echo "${DIR} is not empty."
              else
                echo "Error: ${DIR} is empty."
                exit 1
              fi
            else
              echo "Error: result directory ${DIR} not found."
              exit 1
            fi
          done
        shell: bash

      - name: Sirius MS Test
        run: |
          RESULTS="sirius_cli/src/test/temp_results/"
          OUTPUT="${RESULTS}ms_temp_output/1_Bicuculline_Bicuculline/"
          SUMMARY="${RESULTS}ms_temp_summary/1_Bicuculline_Bicuculline/"
          CANOPUS="${OUTPUT}canopus/"
          CANOPUS_NPC="${OUTPUT}canopus_npc/"
          FINGERPRINTS="${OUTPUT}fingerprints/"
          FINGER_ID="${OUTPUT}fingerprints/"
          echo "${FINGER_ID}"
          DIRS=(${SUMMARY} ${OUTPUT} ${CANOPUS} ${CANOPUS_NPC} ${FINGERPRINTS} ${FINGER_ID})
          echo "${DIRS}"
          for DIR in "${DIRS[@]}" ; do
            if [ -d "${DIR}" ]; then
              echo "Found result directory ${DIR}..."
              if [ "$(ls -A ${DIR})" ]; then
                echo "${DIR} is not empty."
              else
                echo "Error: ${DIR} is empty."
                exit 1
              fi
            else
              echo "Error: result directory ${DIR} not found."
              exit 1
            fi
          done
        shell: bash

      - name: Sirius TXT Test
        run: |
          RESULTS="sirius_cli/src/test/temp_results/"
          SUMMARY="${RESULTS}txt_temp_summary/1_unknown_/"
          if [ -d "${SUMMARY}" ]; then
            echo "Found result directory ${SUMMARY}..."
            if [ "$(ls -A ${SUMMARY})" ]; then
              echo "${SUMMARY} is not empty."
            else
              echo "Error: ${SUMMARY} is empty."
              exit 1
            fi
          else
            echo "Error: result directory ${SUMMARY} not found."
            exit 1
          fi
        shell: bash

      - name: Sirius Run Cleanup
        run: |
          rm -r sirius_cli/src/test/temp_results

      - name: Upload multiOS Source
        uses: actions/upload-artifact@v2
        with:
          name: "sirius-${{ steps.sirius_version.outputs.value }}-${{ runner.os }}-x86-64-headless-img"
          path: sirius_dist/sirius_cli_single_os/build/distributions/${{ runner.os == 'macOS' && 'sirius.app' || 'sirius' }}/

      - name: Upload Distributions
        uses: actions/upload-artifact@v2
        with:
          retention-days: 1
          name: "sirius-${{ steps.sirius_version.outputs.value }}-${{ runner.os }}-x86-64-headless"
          path: |
            ~/.m2/repository/de/unijena/bioinf/ms/sirius/${{ steps.sirius_version.outputs.value }}/*.zip
            ~/.m2/repository/de/unijena/bioinf/ms/sirius/${{ steps.sirius_version.outputs.value }}/*.msi
            ~/.m2/repository/de/unijena/bioinf/ms/sirius/${{ steps.sirius_version.outputs.value }}/*.pkg
            ~/.m2/repository/de/unijena/bioinf/ms/sirius/${{ steps.sirius_version.outputs.value }}/*.deb
            ~/.m2/repository/de/unijena/bioinf/ms/sirius/${{ steps.sirius_version.outputs.value }}/*.sha256

#  distService:
#    strategy:
#      matrix:
#        os: [ ubuntu-latest, windows-latest, macos-latest ]
#    runs-on: ${{ matrix.os }}
#    env:
#      GENERIC_INSTALLER_CERTIFICATE: ${{ secrets.GENERIC_INSTALLER_CERTIFICATE }}
#      MACOS_APP_IDENTITY_ID: ${{ secrets.MACOS_APP_IDENTITY_ID }}
#      MACOS_IDENTITY_ID: ${{ secrets.MACOS_IDENTITY_ID }}
#      MACOS_APPLE_ID: ${{ secrets.MACOS_APPLE_ID }}
#      MACOS_APPLE_ID_PW: ${{ secrets.MACOS_APPLE_ID_PW }}
#      SIRIUS_USER: ${{ secrets.SIRIUS_USER }}
#      SIRIUS_PW: ${{ secrets.SIRIUS_PW }}
#    steps:
#      - uses: actions/checkout@v2
#      - name: Set up Zulu JDK
#        uses: actions/setup-java@v1
#        with:
#          java-version: '15' # The JDK version to make available on the path.
#          java-package: jdk+fx # (jre, jdk, or jdk+fx) - defaults to jdk
#          architecture: x64 # (x64 or x86) - defaults to x64
#      - name: Load Build properties
#        uses: Reedyuk/read-properties@v1.0.1
#        id: sirius_version
#        with:
#          path: './sirius_cli/src/main/resources/sirius_frontend.build.properties'
#          property: 'de.unijena.bioinf.siriusFrontend.version'
#
#      - if: ${{ (matrix.os == 'macos-latest') && (env.MACOS_APP_IDENTITY_ID != '') }}
#        name: Import Apple APP Code-signing ID and p12
#        uses: apple-actions/import-codesign-certs@v1
#        with:
#          keychain-password: ${{ secrets.MACOS_TMP_KEYCHAIN_PWD }}
#          p12-file-base64: ${{ secrets.MACOS_APP_CERTIFICATE }}
#          p12-password: ${{ secrets.MACOS_APP_CERTIFICATE_PWD }}
#
#      - if: ${{ (matrix.os == 'macos-latest') && (env.MACOS_IDENTITY_ID != '') }}
#        name: Import Apple Installer Code-signing ID and p12
#        uses: apple-actions/import-codesign-certs@v1
#        with:
#          create-keychain: false
#          keychain-password: ${{ secrets.MACOS_TMP_KEYCHAIN_PWD }}
#          p12-file-base64: ${{ secrets.MACOS_CERTIFICATE }}
#          p12-password: ${{ secrets.MACOS_CERTIFICATE_PWD }}
#
#      - if: matrix.os == 'macos-latest'
#        name: Check Identities
#        run: /usr/bin/security find-identity
#
#      - if: ${{ (matrix.os == 'windows-latest' ||  matrix.os == 'ubuntu-latest') && (env.GENERIC_INSTALLER_CERTIFICATE != '') }}
#        name: Load generic installer codesign cert
#        id: generic_codesign_cert
#        uses: timheuer/base64-to-file@v1.1
#        with:
#          fileName: 'generic_installer_cert.p12'
#          encodedString: ${{ env.GENERIC_INSTALLER_CERTIFICATE }}
#
#      - name: Gradle Build
#        uses: eskatos/gradle-command-action@v1
#        env:
#          WIN_INSTALLER_CERTIFICATE_FILE: ${{ steps.generic_codesign_cert.outputs.filePath }}
#        with:
#          gradle-version: 6.9
#          build-root-directory: sirius_dist/sirius_service_single_os
#          arguments: clean publishSiriusPublicationToMavenLocal -P "de.unijena.bioinf.build.MACOS_APP_IDENTITY_ID=${{ secrets.MACOS_APP_IDENTITY_ID }}" -P "de.unijena.bioinf.build.MACOS_IDENTITY_ID=${{ secrets.MACOS_IDENTITY_ID }}" -P "de.unijena.bioinf.build.MACOS_APPLE_ID=${{ secrets.MACOS_APPLE_ID }}" -P "de.unijena.bioinf.build.WIN_INSTALLER_CERTIFICATE_FILE=${{ steps.generic_codesign_cert.outputs.filePath }}"  -P "de.unijena.bioinf.WIN_INSTALLER_CERTIFICATE_PW=${{ secrets.GENERIC_INSTALLER_CERTIFICATE_PW }}" -P "de.unijena.bioinf.WIN_INSTALLER_CERTIFICATE_TIMESTAMP_URL=${{ secrets.GENERIC_INSTALLER_CERTIFICATE_TIMESTAMP_URL }}"
#
#      - if: matrix.os == 'windows-latest'
#        name: Sirius Windows Run
#        run: |
#          ./sirius_dist/sirius_service_single_os/build/distributions/sirius/sirius.exe login --user-env ${{ env.SIRIUS_USER }} --password-env  ${{ env.SIRIUS_PW }}
#          mkdir sirius_cli/src/test/temp_results
#          mkdir sirius_cli/src/test/temp_results/mgf_temp_output
#          mkdir sirius_cli/src/test/temp_results/mgf_temp_summary
#          mkdir sirius_cli/src/test/temp_results/ms_temp_output
#          mkdir sirius_cli/src/test/temp_results/ms_temp_summary
#          mkdir sirius_cli/src/test/temp_results/txt_temp_output
#          mkdir sirius_cli/src/test/temp_results/txt_temp_summary
#          ./sirius_dist/sirius_service_single_os/build/distributions/sirius/sirius.exe --input sirius_doc/manual/demo-data/mgf/laudanosine.mgf --output sirius_cli/src/test/temp_results/mgf_temp_output formula -p orbitrap fingerprint structure compound-classes write-summaries --output sirius_cli/src/test/temp_results/mgf_temp_summary
#          ./sirius_dist/sirius_service_single_os/build/distributions/sirius/sirius.exe -1 sirius_doc/manual/demo-data/txt/chelidonine_ms.txt -2 sirius_doc/manual/demo-data/txt/chelidonine_msms1.txt,sirius_doc/manual/demo-data/txt/chelidonine_msms2.txt -z 354.134704589844 -o sirius_cli/src/test/temp_results/txt_temp_output formula -p orbitrap write-summaries --output sirius_cli/src/test/temp_results/txt_temp_summary
#          ./sirius_dist/sirius_service_single_os/build/distributions/sirius/sirius.exe -o sirius_cli/src/test/temp_results/ms_temp_output -i sirius_doc/manual/demo-data/ms/Bicuculline.ms --ignore-formula formula -p orbitrap -c 5 fingerprint structure compound-classes write-summaries --output sirius_cli/src/test/temp_results/ms_temp_summary
#
#      - if: matrix.os == 'ubuntu-latest'
#        name: Sirius Ubuntu Run
#        run: |
#          ./sirius_dist/sirius_service_single_os/build/distributions/sirius/bin/sirius login --user-env ${{ env.SIRIUS_USER }} --password-env  ${{ env.SIRIUS_PW }}
#          mkdir sirius_cli/src/test/temp_results
#          mkdir sirius_cli/src/test/temp_results/mgf_temp_output
#          mkdir sirius_cli/src/test/temp_results/mgf_temp_summary
#          mkdir sirius_cli/src/test/temp_results/ms_temp_output
#          mkdir sirius_cli/src/test/temp_results/ms_temp_summary
#          mkdir sirius_cli/src/test/temp_results/txt_temp_output
#          mkdir sirius_cli/src/test/temp_results/txt_temp_summary
#          ./sirius_dist/sirius_service_single_os/build/distributions/sirius/bin/sirius --input sirius_doc/manual/demo-data/mgf/laudanosine.mgf --output sirius_cli/src/test/temp_results/mgf_temp_output formula -p orbitrap fingerprint structure compound-classes write-summaries --output sirius_cli/src/test/temp_results/mgf_temp_summary
#          ./sirius_dist/sirius_service_single_os/build/distributions/sirius/bin/sirius -1 sirius_doc/manual/demo-data/txt/chelidonine_ms.txt -2 sirius_doc/manual/demo-data/txt/chelidonine_msms1.txt,sirius_doc/manual/demo-data/txt/chelidonine_msms2.txt -z 354.134704589844 -o sirius_cli/src/test/temp_results/txt_temp_output formula -p orbitrap write-summaries --output sirius_cli/src/test/temp_results/txt_temp_summary
#          ./sirius_dist/sirius_service_single_os/build/distributions/sirius/bin/sirius -o sirius_cli/src/test/temp_results/ms_temp_output -i sirius_doc/manual/demo-data/ms/Bicuculline.ms --ignore-formula formula -p orbitrap -c 5 fingerprint structure compound-classes write-summaries --output sirius_cli/src/test/temp_results/ms_temp_summary
#
#      - if: matrix.os == 'macos-latest'
#        name: Sirius MacOS Run
#        run: |
#          ./sirius_dist/sirius_service_single_os/build/distributions/sirius.app/Contents/MacOS/sirius login --user-env ${{ env.SIRIUS_USER }} --password-env  ${{ env.SIRIUS_PW }}
#          mkdir sirius_cli/src/test/temp_results
#          mkdir sirius_cli/src/test/temp_results/mgf_temp_output
#          mkdir sirius_cli/src/test/temp_results/mgf_temp_summary
#          mkdir sirius_cli/src/test/temp_results/ms_temp_output
#          mkdir sirius_cli/src/test/temp_results/ms_temp_summary
#          mkdir sirius_cli/src/test/temp_results/txt_temp_output
#          mkdir sirius_cli/src/test/temp_results/txt_temp_summary
#          ./sirius_dist/sirius_service_single_os/build/distributions/sirius.app/Contents/MacOS/sirius --input sirius_doc/manual/demo-data/mgf/laudanosine.mgf --output sirius_cli/src/test/temp_results/mgf_temp_output formula -p orbitrap fingerprint structure compound-classes write-summaries --output sirius_cli/src/test/temp_results/mgf_temp_summary
#          ./sirius_dist/sirius_service_single_os/build/distributions/sirius.app/Contents/MacOS/sirius -1 sirius_doc/manual/demo-data/txt/chelidonine_ms.txt -2 sirius_doc/manual/demo-data/txt/chelidonine_msms1.txt,sirius_doc/manual/demo-data/txt/chelidonine_msms2.txt -z 354.134704589844 -o sirius_cli/src/test/temp_results/txt_temp_output formula -p orbitrap write-summaries --output sirius_cli/src/test/temp_results/txt_temp_summary
#          ./sirius_dist/sirius_service_single_os/build/distributions/sirius.app/Contents/MacOS/sirius -o sirius_cli/src/test/temp_results/ms_temp_output -i sirius_doc/manual/demo-data/ms/Bicuculline.ms --ignore-formula formula -p orbitrap -c 5 fingerprint structure compound-classes write-summaries --output sirius_cli/src/test/temp_results/ms_temp_summary
#
#      - name: Sirius MGF Test
#        run: |
#          RESULTS="sirius_cli/src/test/temp_results/"
#          OUTPUT="${RESULTS}mgf_temp_output/1_laudanosine_FEATURE_1/"
#          SUMMARY="${RESULTS}mgf_temp_summary/1_laudanosine_FEATURE_1/"
#          CANOPUS="${OUTPUT}canopus/"
#          CANOPUS_NPC="${OUTPUT}canopus_npc/"
#          FINGERPRINTS="${OUTPUT}fingerprints/"
#          FINGER_ID="${OUTPUT}fingerprints/"
#          echo "${FINGER_ID}"
#          DIRS=(${SUMMARY} ${OUTPUT} ${CANOPUS} ${CANOPUS_NPC} ${FINGERPRINTS} ${FINGER_ID})
#          echo "${DIRS}"
#          for DIR in "${DIRS[@]}" ; do
#            if [ -d "${DIR}" ]; then
#              echo "Found result directory ${DIR}..."
#              if [ "$(ls -A ${DIR})" ]; then
#                echo "${DIR} is not empty."
#              else
#                echo "Error: ${DIR} is empty."
#                exit 1
#              fi
#            else
#              echo "Error: result directory ${DIR} not found."
#              exit 1
#            fi
#          done
#        shell: bash
#
#      - name: Sirius MS Test
#        run: |
#          RESULTS="sirius_cli/src/test/temp_results/"
#          OUTPUT="${RESULTS}ms_temp_output/1_Bicuculline_Bicuculline/"
#          SUMMARY="${RESULTS}ms_temp_summary/1_Bicuculline_Bicuculline/"
#          CANOPUS="${OUTPUT}canopus/"
#          CANOPUS_NPC="${OUTPUT}canopus_npc/"
#          FINGERPRINTS="${OUTPUT}fingerprints/"
#          FINGER_ID="${OUTPUT}fingerprints/"
#          echo "${FINGER_ID}"
#          DIRS=(${SUMMARY} ${OUTPUT} ${CANOPUS} ${CANOPUS_NPC} ${FINGERPRINTS} ${FINGER_ID})
#          echo "${DIRS}"
#          for DIR in "${DIRS[@]}" ; do
#            if [ -d "${DIR}" ]; then
#              echo "Found result directory ${DIR}..."
#              if [ "$(ls -A ${DIR})" ]; then
#                echo "${DIR} is not empty."
#              else
#                echo "Error: ${DIR} is empty."
#                exit 1
#              fi
#            else
#              echo "Error: result directory ${DIR} not found."
#              exit 1
#            fi
#          done
#        shell: bash
#
#      - name: Sirius TXT Test
#        run: |
#          RESULTS="sirius_cli/src/test/temp_results/"
#          SUMMARY="${RESULTS}txt_temp_summary/1_unknown_/"
#          if [ -d "${SUMMARY}" ]; then
#            echo "Found result directory ${SUMMARY}..."
#            if [ "$(ls -A ${SUMMARY})" ]; then
#              echo "${SUMMARY} is not empty."
#            else
#              echo "Error: ${SUMMARY} is empty."
#              exit 1
#            fi
#          else
#            echo "Error: result directory ${SUMMARY} not found."
#            exit 1
#          fi
#        shell: bash
#
#      - name: Sirius Run Cleanup
#        run: |
#          rm -r sirius_cli/src/test/temp_results
#
#      - name: Upload Distributions
#        uses: actions/upload-artifact@v2
#        with:
#          retention-days: 1
#          name: "sirius-${{ steps.sirius_version.outputs.value }}-${{ runner.os }}-x86-64-rest"
#          path: |
#            ~/.m2/repository/de/unijena/bioinf/ms/sirius/${{ steps.sirius_version.outputs.value }}/*.zip
#            ~/.m2/repository/de/unijena/bioinf/ms/sirius/${{ steps.sirius_version.outputs.value }}/*.msi
#            ~/.m2/repository/de/unijena/bioinf/ms/sirius/${{ steps.sirius_version.outputs.value }}/*.pkg
#            ~/.m2/repository/de/unijena/bioinf/ms/sirius/${{ steps.sirius_version.outputs.value }}/*.deb
#            ~/.m2/repository/de/unijena/bioinf/ms/sirius/${{ steps.sirius_version.outputs.value }}/*.sha256
#
#  distGUI:
#    strategy:
#      matrix:
#        os: [ubuntu-latest, windows-latest, macos-latest]
#    runs-on: ${{ matrix.os }}
#    env:
#      GENERIC_INSTALLER_CERTIFICATE: ${{ secrets.GENERIC_INSTALLER_CERTIFICATE }}
#      MACOS_APP_IDENTITY_ID: ${{ secrets.MACOS_APP_IDENTITY_ID }}
#      MACOS_IDENTITY_ID: ${{ secrets.MACOS_IDENTITY_ID }}
#      MACOS_APPLE_ID: ${{ secrets.MACOS_APPLE_ID }}
#      MACOS_APPLE_ID_PW: ${{ secrets.MACOS_APPLE_ID_PW }}
#      SIRIUS_USER: ${{ secrets.SIRIUS_USER }}
#      SIRIUS_PW: ${{ secrets.SIRIUS_PW }}
#    steps:
#      - uses: actions/checkout@v2
#      - name: Set up Zulu JDK-FX
#        uses: actions/setup-java@v1
#        with:
#          java-version: '15' # The JDK version to make available on the path.
#          java-package: jdk+fx # (jre, jdk, or jdk+fx) - defaults to jdk
#          architecture: x64 # (x64 or x86) - defaults to x64
#      - name: Load Build properties
#        uses: Reedyuk/read-properties@v1.0.1
#        id: sirius_version
#        with:
#          path: './sirius_cli/src/main/resources/sirius_frontend.build.properties'
#          property: 'de.unijena.bioinf.siriusFrontend.version'
#
#      - if: ${{ (matrix.os == 'macos-latest') && (env.MACOS_APP_IDENTITY_ID != '') }}
#        name: Import Apple APP Code-signing ID and p12
#        uses: apple-actions/import-codesign-certs@v1
#        with:
#          keychain-password: ${{ secrets.MACOS_TMP_KEYCHAIN_PWD }}
#          p12-file-base64: ${{ secrets.MACOS_APP_CERTIFICATE }}
#          p12-password: ${{ secrets.MACOS_APP_CERTIFICATE_PWD }}
#
#      - if: ${{ (matrix.os == 'macos-latest') && (env.MACOS_IDENTITY_ID != '') }}
#        name: Import Apple Installer Code-signing ID and p12
#        uses: apple-actions/import-codesign-certs@v1
#        with:
#          create-keychain: false
#          keychain-password: ${{ secrets.MACOS_TMP_KEYCHAIN_PWD }}
#          p12-file-base64: ${{ secrets.MACOS_CERTIFICATE }}
#          p12-password: ${{ secrets.MACOS_CERTIFICATE_PWD }}
#
#      - if: matrix.os == 'macos-latest'
#        name: Check Identities
#        run: /usr/bin/security find-identity
#
#      - if: ${{ (matrix.os == 'windows-latest' ||  matrix.os == 'ubuntu-latest') && (env.GENERIC_INSTALLER_CERTIFICATE != '') }}
#        name: Load generic installer codesign cert
#        id: generic_codesign_cert
#        uses: timheuer/base64-to-file@v1.1
#        with:
#          fileName: 'generic_installer_cert.p12'
#          encodedString: ${{ env.GENERIC_INSTALLER_CERTIFICATE }}
#
#      - name: Gradle Build
#        uses: eskatos/gradle-command-action@v1
#        env:
#          WIN_INSTALLER_CERTIFICATE_FILE: ${{ steps.generic_codesign_cert.outputs.filePath }}
#        with:
#          gradle-version: 6.9
#          build-root-directory: sirius_dist/sirius_gui_single_os
#          arguments: clean publishSiriusPublicationToMavenLocal -P "de.unijena.bioinf.build.MACOS_APP_IDENTITY_ID=${{ secrets.MACOS_APP_IDENTITY_ID }}" -P "de.unijena.bioinf.build.MACOS_IDENTITY_ID=${{ secrets.MACOS_IDENTITY_ID }}" -P "de.unijena.bioinf.build.MACOS_APPLE_ID=${{ secrets.MACOS_APPLE_ID }}" -P "de.unijena.bioinf.build.WIN_INSTALLER_CERTIFICATE_FILE=${{ steps.generic_codesign_cert.outputs.filePath }}" -P "de.unijena.bioinf.WIN_INSTALLER_CERTIFICATE_PW=${{ secrets.GENERIC_INSTALLER_CERTIFICATE_PW }}" -P "de.unijena.bioinf.WIN_INSTALLER_CERTIFICATE_TIMESTAMP_URL=${{ secrets.GENERIC_INSTALLER_CERTIFICATE_TIMESTAMP_URL }}"
#
#      - if: matrix.os == 'windows-latest'
#        name: Sirius Windows Run
#        run: |
#          ./sirius_dist/sirius_gui_single_os/build/distributions/sirius/sirius.exe login --user-env ${{ env.SIRIUS_USER }} --password-env  ${{ env.SIRIUS_PW }}
#          mkdir sirius_cli/src/test/temp_results
#          mkdir sirius_cli/src/test/temp_results/mgf_temp_output
#          mkdir sirius_cli/src/test/temp_results/mgf_temp_summary
#          mkdir sirius_cli/src/test/temp_results/ms_temp_output
#          mkdir sirius_cli/src/test/temp_results/ms_temp_summary
#          mkdir sirius_cli/src/test/temp_results/txt_temp_output
#          mkdir sirius_cli/src/test/temp_results/txt_temp_summary
#          ./sirius_dist/sirius_gui_single_os/build/distributions/sirius/sirius.exe --input sirius_doc/manual/demo-data/mgf/laudanosine.mgf --output sirius_cli/src/test/temp_results/mgf_temp_output formula -p orbitrap fingerprint structure compound-classes write-summaries --output sirius_cli/src/test/temp_results/mgf_temp_summary
#          ./sirius_dist/sirius_gui_single_os/build/distributions/sirius/sirius.exe -1 sirius_doc/manual/demo-data/txt/chelidonine_ms.txt -2 sirius_doc/manual/demo-data/txt/chelidonine_msms1.txt,sirius_doc/manual/demo-data/txt/chelidonine_msms2.txt -z 354.134704589844 -o sirius_cli/src/test/temp_results/txt_temp_output formula -p orbitrap write-summaries --output sirius_cli/src/test/temp_results/txt_temp_summary
#          ./sirius_dist/sirius_gui_single_os/build/distributions/sirius/sirius.exe -o sirius_cli/src/test/temp_results/ms_temp_output -i sirius_doc/manual/demo-data/ms/Bicuculline.ms --ignore-formula formula -p orbitrap -c 5 fingerprint structure compound-classes write-summaries --output sirius_cli/src/test/temp_results/ms_temp_summary
#
#      - if: matrix.os == 'ubuntu-latest'
#        name: Sirius Ubuntu Run
#        run: |
#          ./sirius_dist/sirius_gui_single_os/build/distributions/sirius/bin/sirius login --user-env${{ env.SIRIUS_USER }} --password-env  ${{ env.SIRIUS_PW }}
#          mkdir sirius_cli/src/test/temp_results
#          mkdir sirius_cli/src/test/temp_results/mgf_temp_output
#          mkdir sirius_cli/src/test/temp_results/mgf_temp_summary
#          mkdir sirius_cli/src/test/temp_results/ms_temp_output
#          mkdir sirius_cli/src/test/temp_results/ms_temp_summary
#          mkdir sirius_cli/src/test/temp_results/txt_temp_output
#          mkdir sirius_cli/src/test/temp_results/txt_temp_summary
#          ./sirius_dist/sirius_gui_single_os/build/distributions/sirius/bin/sirius --input sirius_doc/manual/demo-data/mgf/laudanosine.mgf --output sirius_cli/src/test/temp_results/mgf_temp_output formula -p orbitrap fingerprint structure compound-classes write-summaries --output sirius_cli/src/test/temp_results/mgf_temp_summary
#          ./sirius_dist/sirius_gui_single_os/build/distributions/sirius/bin/sirius -1 sirius_doc/manual/demo-data/txt/chelidonine_ms.txt -2 sirius_doc/manual/demo-data/txt/chelidonine_msms1.txt,sirius_doc/manual/demo-data/txt/chelidonine_msms2.txt -z 354.134704589844 -o sirius_cli/src/test/temp_results/txt_temp_output formula -p orbitrap write-summaries --output sirius_cli/src/test/temp_results/txt_temp_summary
#          ./sirius_dist/sirius_gui_single_os/build/distributions/sirius/bin/sirius -o sirius_cli/src/test/temp_results/ms_temp_output -i sirius_doc/manual/demo-data/ms/Bicuculline.ms --ignore-formula formula -p orbitrap -c 5 fingerprint structure compound-classes write-summaries --output sirius_cli/src/test/temp_results/ms_temp_summary
#
#      - if: matrix.os == 'macos-latest'
#        name: Sirius MacOS Run
#        run: |
#          ./sirius_dist/sirius_gui_single_os/build/distributions/sirius.app/Contents/MacOS/sirius login --user-env ${{ env.SIRIUS_USER }} --password-env  ${{ env.SIRIUS_PW }}
#          mkdir sirius_cli/src/test/temp_results
#          mkdir sirius_cli/src/test/temp_results/mgf_temp_output
#          mkdir sirius_cli/src/test/temp_results/mgf_temp_summary
#          mkdir sirius_cli/src/test/temp_results/ms_temp_output
#          mkdir sirius_cli/src/test/temp_results/ms_temp_summary
#          mkdir sirius_cli/src/test/temp_results/txt_temp_output
#          mkdir sirius_cli/src/test/temp_results/txt_temp_summary
#          ./sirius_dist/sirius_gui_single_os/build/distributions/sirius.app/Contents/MacOS/sirius --input sirius_doc/manual/demo-data/mgf/laudanosine.mgf --output sirius_cli/src/test/temp_results/mgf_temp_output formula -p orbitrap fingerprint structure compound-classes write-summaries --output sirius_cli/src/test/temp_results/mgf_temp_summary
#          ./sirius_dist/sirius_gui_single_os/build/distributions/sirius.app/Contents/MacOS/sirius -1 sirius_doc/manual/demo-data/txt/chelidonine_ms.txt -2 sirius_doc/manual/demo-data/txt/chelidonine_msms1.txt,sirius_doc/manual/demo-data/txt/chelidonine_msms2.txt -z 354.134704589844 -o sirius_cli/src/test/temp_results/txt_temp_output formula -p orbitrap write-summaries --output sirius_cli/src/test/temp_results/txt_temp_summary
#          ./sirius_dist/sirius_gui_single_os/build/distributions/sirius.app/Contents/MacOS/sirius -o sirius_cli/src/test/temp_results/ms_temp_output -i sirius_doc/manual/demo-data/ms/Bicuculline.ms --ignore-formula formula -p orbitrap -c 5 fingerprint structure compound-classes write-summaries --output sirius_cli/src/test/temp_results/ms_temp_summary
#
#      - name: Sirius MGF Test
#        run: |
#          RESULTS="sirius_cli/src/test/temp_results/"
#          OUTPUT="${RESULTS}mgf_temp_output/1_laudanosine_FEATURE_1/"
#          SUMMARY="${RESULTS}mgf_temp_summary/1_laudanosine_FEATURE_1/"
#          CANOPUS="${OUTPUT}canopus/"
#          CANOPUS_NPC="${OUTPUT}canopus_npc/"
#          FINGERPRINTS="${OUTPUT}fingerprints/"
#          FINGER_ID="${OUTPUT}fingerprints/"
#          echo "${FINGER_ID}"
#          DIRS=(${SUMMARY} ${OUTPUT} ${CANOPUS} ${CANOPUS_NPC} ${FINGERPRINTS} ${FINGER_ID})
#          echo "${DIRS}"
#          for DIR in "${DIRS[@]}" ; do
#            if [ -d "${DIR}" ]; then
#              echo "Found result directory ${DIR}..."
#              if [ "$(ls -A ${DIR})" ]; then
#                echo "${DIR} is not empty."
#              else
#                echo "Error: ${DIR} is empty."
#                exit 1
#              fi
#            else
#              echo "Error: result directory ${DIR} not found."
#              exit 1
#            fi
#          done
#        shell: bash
#
#      - name: Sirius MS Test
#        run: |
#          RESULTS="sirius_cli/src/test/temp_results/"
#          OUTPUT="${RESULTS}ms_temp_output/1_Bicuculline_Bicuculline/"
#          SUMMARY="${RESULTS}ms_temp_summary/1_Bicuculline_Bicuculline/"
#          CANOPUS="${OUTPUT}canopus/"
#          CANOPUS_NPC="${OUTPUT}canopus_npc/"
#          FINGERPRINTS="${OUTPUT}fingerprints/"
#          FINGER_ID="${OUTPUT}fingerprints/"
#          echo "${FINGER_ID}"
#          DIRS=(${SUMMARY} ${OUTPUT} ${CANOPUS} ${CANOPUS_NPC} ${FINGERPRINTS} ${FINGER_ID})
#          echo "${DIRS}"
#          for DIR in "${DIRS[@]}" ; do
#            if [ -d "${DIR}" ]; then
#              echo "Found result directory ${DIR}..."
#              if [ "$(ls -A ${DIR})" ]; then
#                echo "${DIR} is not empty."
#              else
#                echo "Error: ${DIR} is empty."
#                exit 1
#              fi
#            else
#              echo "Error: result directory ${DIR} not found."
#              exit 1
#            fi
#          done
#        shell: bash
#
#      - name: Sirius TXT Test
#        run: |
#          RESULTS="sirius_cli/src/test/temp_results/"
#          SUMMARY="${RESULTS}txt_temp_summary/1_unknown_/"
#          if [ -d "${SUMMARY}" ]; then
#            echo "Found result directory ${SUMMARY}..."
#            if [ "$(ls -A ${SUMMARY})" ]; then
#              echo "${SUMMARY} is not empty."
#            else
#              echo "Error: ${SUMMARY} is empty."
#              exit 1
#            fi
#          else
#            echo "Error: result directory ${SUMMARY} not found."
#            exit 1
#          fi
#        shell: bash
#
#      - name: Sirius Run Cleanup
#        run: |
#          rm -r sirius_cli/src/test/temp_results
#
#      - name: Upload Distributions
#        uses: actions/upload-artifact@v2
#        with:
#          retention-days: 1
#          name: "sirius-${{ steps.sirius_version.outputs.value }}-${{ runner.os }}-x86-64"
#          path: |
#            ~/.m2/repository/de/unijena/bioinf/ms/sirius/${{ steps.sirius_version.outputs.value }}/*.zip
#            ~/.m2/repository/de/unijena/bioinf/ms/sirius/${{ steps.sirius_version.outputs.value }}/*.msi
#            ~/.m2/repository/de/unijena/bioinf/ms/sirius/${{ steps.sirius_version.outputs.value }}/*.pkg
#            ~/.m2/repository/de/unijena/bioinf/ms/sirius/${{ steps.sirius_version.outputs.value }}/*.deb
#            ~/.m2/repository/de/unijena/bioinf/ms/sirius/${{ steps.sirius_version.outputs.value }}/*.sha256
#
#
#
#  distMulti:
#    needs: distCLI
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v2
#      - name: Set up Zulu JDK
#        uses: actions/setup-java@v1
#        with:
#          java-version: '15' # The JDK version to make available on the path.
#          java-package: jdk # (jre, jdk, or jdk+fx) - defaults to jdk
#          architecture: x64 # (x64 or x86) - defaults to x64
#      - name: Load Build properties
#        uses: Reedyuk/read-properties@v1.0.1
#        id: sirius_version
#        with:
#          path: './sirius_cli/src/main/resources/sirius_frontend.build.properties'
#          property: 'de.unijena.bioinf.siriusFrontend.version'
#
#      - uses: actions/download-artifact@v2
#        with:
#          name: "sirius-${{ steps.sirius_version.outputs.value }}-Linux-x86-64-headless-img"
#          path: sirius_dist/sirius_cli_multi_os/build/tmp/artifacts/sirius-${{ steps.sirius_version.outputs.value }}-Linux-x86-64-headless-img
#      - uses: actions/download-artifact@v2
#        with:
#          name: "sirius-${{ steps.sirius_version.outputs.value }}-Windows-x86-64-headless-img"
#          path: sirius_dist/sirius_cli_multi_os/build/tmp/artifacts/sirius-${{ steps.sirius_version.outputs.value }}-Windows-x86-64-headless-img
#      - uses: actions/download-artifact@v2
#        with:
#          name: "sirius-${{ steps.sirius_version.outputs.value }}-macOS-x86-64-headless-img"
#          path: sirius_dist/sirius_cli_multi_os/build/tmp/artifacts/sirius-${{ steps.sirius_version.outputs.value }}-macOS-x86-64-headless-img
#      - name: Display downloaded artifact files
#        run: ls -lah
#        working-directory: sirius_dist/sirius_cli_multi_os/build/tmp/artifacts/
#
#      - name: Gradle Build
#        uses: eskatos/gradle-command-action@v1
#        with:
#          gradle-version: 6.9
#          build-root-directory: sirius_dist/sirius_cli_multi_os
#          arguments: publishSiriusPublicationToMavenLocal
#      - name: Upload Distributions
#        uses: actions/upload-artifact@v2
#        with:
#          retention-days: 1
#          name: "sirius-${{ steps.sirius_version.outputs.value }}-multiOS-x86-64-headless"
#          path: |
#            ~/.m2/repository/de/unijena/bioinf/ms/sirius/${{ steps.sirius_version.outputs.value }}/*.zip
#            ~/.m2/repository/de/unijena/bioinf/ms/sirius/${{ steps.sirius_version.outputs.value }}/*.sha256
#      - name: Delete img artifacts
#        uses: geekyeggo/delete-artifact@v1
#        with:
#          name: |
#            sirius-${{ steps.sirius_version.outputs.value }}-Linux-x86-64-headless-img
#            sirius-${{ steps.sirius_version.outputs.value }}-Windows-x86-64-headless-img
#            sirius-${{ steps.sirius_version.outputs.value }}-macOS-x86-64-headless-img
#

#  release:
#    needs: [ distCLI, distGUI, distService, distMulti]
##    needs: [ distCLI, distGUI, distMulti]
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v2
#      - name: Inject slug/short variables
#        uses: rlespinasse/github-slug-action@v3.x
#      - name: Load Build properties
#        uses: Reedyuk/read-properties@v1.0.1
#        id: sirius_version
#        with:
#          path: './sirius_cli/src/main/resources/sirius_frontend.build.properties'
#          property: 'de.unijena.bioinf.siriusFrontend.version'
#      - uses: actions/download-artifact@v2
#        with:
#          path: sirius_dist/build/tmp/artifacts/
#      - name: Display downloaded artifact files
#        run: ls -lah
#        working-directory: sirius_dist/build/tmp/artifacts/
#      - uses: ncipollo/release-action@v1
#        with:
#          artifacts: "sirius_dist/build/tmp/artifacts/*/*"
#          body: "Prebuilt SIRIUS releases for all supported platforms. [Signed installers](https://github.com/bright-giant/sirius/releases) of this builds provided by [Bright Giant](https://bright-giant.com/) might be available [here](https://github.com/bright-giant/sirius/releases)."
#          name: "SIRIUS v${{ steps.sirius_version.outputs.value }}"
#          tag: "v${{ steps.sirius_version.outputs.value }}"
#          prerelease: ${{ endsWith(steps.sirius_version.outputs.value, '-SNAPSHOT') }}
#          allowUpdates: ${{ endsWith(steps.sirius_version.outputs.value, '-SNAPSHOT') }}
#          draft: ${{ env.GITHUB_REF_SLUG == 'stable' && 'false' || 'true' }}
#          token: ${{ secrets.GITHUB_TOKEN }}
