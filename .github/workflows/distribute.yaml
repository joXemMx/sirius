name: Build and Publish
on:
  push:
    branches:
      - stable
      - master
      - sirius_worker_check
    #      - stable-service-api
    paths-ignore:
      - '**/README.md'
      - 'sirius_doc/**/*'

jobs:
  testSiriusCLI:
    strategy:
      matrix:
        os: [ ubuntu-latest ]
    runs-on: ${{ matrix.os }}
    env:
      SIRIUS_USER: ${{ secrets.SIRIUS_USER }}
      SIRIUS_PW: ${{ secrets.SIRIUS_PW }}
      PAT: ${{ secrets.PAT }}
      EMAIL_USR: ${{ secrets.EMAIL_USR }}
      EMAIL_PW: ${{ secrets.EMAIL_PW }}

    steps:
      - uses: actions/checkout@v2
        with:
          token: ${{ env.PAT }}

      - name: Change a file
        run: |
          cd .github/
          echo "h"  >> trashfile.txt
          cat trashfile.txt
        shell: bash

      - name: Set up Zulu JDK
        uses: actions/setup-java@v1
        with:
          java-version: '15' # The JDK version to make available on the path.
          java-package: jdk # (jre, jdk, or jdk+fx) - defaults to jdk
          architecture: x64 # (x64 or x86) - defaults to x64
      - name: Load Build properties
        uses: Reedyuk/read-properties@v1.0.1
        id: sirius_version
        with:
          path: './sirius_cli/src/main/resources/sirius_frontend.build.properties'
          property: 'de.unijena.bioinf.siriusFrontend.version'

      - name: Gradle Build
        uses: eskatos/gradle-command-action@v1
        env:
          WIN_INSTALLER_CERTIFICATE_FILE: ${{ steps.generic_codesign_cert.outputs.filePath }}
        with:
          gradle-version: 6.9
          build-root-directory: sirius_dist/sirius_cli_single_os
          arguments: distImage

      - name: Sirius Run
        run: |
          TEMP_DIR="$(cd "$(dirname "sirius_cli/src/test/temp_results")"; pwd -P)/$(basename "sirius_cli/src/test/temp_results")"
          mkdir "${TEMP_DIR}" "${TEMP_DIR}/mgf_temp_output" "${TEMP_DIR}/mgf_temp_summary" 
          DEMO_DIR="$(cd "$(dirname "sirius_doc/manual/demo-data")"; pwd -P)/$(basename "sirius_doc/manual/demo-data")"
          MGF_DATA="${DEMO_DIR}/mgf/laudanosine.mgf"
          MGF_OUTPUT="${TEMP_DIR}/mgf_temp_output"
          MGF_SUMMARY="${TEMP_DIR}/mgf_temp_summary"
          case "$OSTYPE" in
            darwin*) SIRIUS="./sirius_dist/sirius_cli_single_os/build/distributions/sirius.app/Contents/MacOS/sirius" ;;
            linux*) SIRIUS="./sirius_dist/sirius_cli_single_os/build/distributions/sirius/bin/sirius" ;;
            msys*) SIRIUS="./sirius_dist/sirius_cli_single_os/build/distributions/sirius/sirius.exe" ;;
            *) echo "Error: Could not find OS."; exit 1 ;;
          esac
          ${SIRIUS} login --user-env SIRIUS_USER --password-env SIRIUS_PW
          timeout 1m ${SIRIUS} --input ${MGF_DATA} --output ${MGF_OUTPUT} formula -p orbitrap fingerprint structure compound-classes write-summaries --output ${MGF_SUMMARY}
        shell: bash

      - name: Sirius MGF Test
        run: |
          RESULTS="sirius_cli/src/test/temp_results/"
          OUTPUT="${RESULTS}mgf_temp_output/1_laudanosine_FEATURE_1/"
          SUMMARY="${RESULTS}mgf_temp_summary/1_laudanosine_FEATURE_1/"
          CANOPUS="${OUTPUT}canopus/"
          CANOPUS_NPC="${OUTPUT}canopus_npc/"
          FINGERPRINTS="${OUTPUT}fingerprints/"
          FINGER_ID="${OUTPUT}fingerid/"
          DIRS=(${SUMMARY} ${OUTPUT} ${CANOPUS} ${CANOPUS_NPC} ${FINGERPRINTS} ${FINGER_ID})
          for DIR in "${DIRS[@]}" ; do
            if [ -d "${DIR}" ]; then
              echo "Found result directory ${DIR}..."
              if [ "$(ls -A ${DIR})" ]; then
                echo "${DIR} is not empty."
              else
                echo "Error: ${DIR} is empty."
                exit 1
              fi
            else
              echo "Error: result directory ${DIR} not found."
              exit 1
            fi
          done
        shell: bash

      - uses: stefanzweifel/git-auto-commit-action@v4
        if: always
        with:
          commit_message: Automatic recommit
          branch: sirius_worker_check
          file_pattern: .github/trashfile.txt

      - name: Send mail
        if: failure()
        uses: dawidd6/action-send-mail@v2
        with:
          # mail server settings
          server_address: securesmtp.t-online.de
          server_port: 465
          # user credentials
          username: ${{ env.EMAIL_USR }}
          password: ${{ env.EMAIL_PW }}
          # email subject
          subject: Sirius runner failure
          # email body as text
          body: The GitHub actions to test if Sirius runners are active had a failure.
          # comma-separated string, send email to
          to: jonas.em@t-online.de
          # from email name
          from: Jonas

      - name: Sirius Run Cleanup
        if: always()
        run: |
          rm -r sirius_cli/src/test/temp_results